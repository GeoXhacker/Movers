#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("backend-movers:server");
var http = require("http");
const jwt = require("jsonwebtoken");
const { SECRET_KEY } = require("../constants");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//setting up socket io
const { Server } = require("socket.io");
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  },
});

module.exports = { io };
const uuid = require("uuid");
const notify = require("../models/notify");

io.engine.generateId = (req) => {
  return uuid.v4(); // must be unique across all Socket.IO servers
};

io.use((socket, next) => {
  jwt.verify(socket.handshake.auth.token, SECRET_KEY, function (err, decoded) {
    if (!err) {
      socket.user = decoded;
    }
    next();
  });
});

io.on("connection", (socket) => {
  if (socket.user) {
    console.log(`user connected`, socket.user);

    notify.find({ user: socket.user.id }, (err, doc) => {
      if (doc) {
        // return io.on("checkDoc", (socket) => {
        //   console.log(socket, "checked");
        // });
        console.log("user notifications", doc);

        // io.on("checkDoc", (uiDoc) => {
        //   console.log(uiDoc);
        //   console.log("checking......dfjjffjjffj");
        //   if (uiDoc) {
        //     if (uiDoc.length < doc.length) {
        //       io.emit("notifications", doc);
        //     } else console.log("notifications upto date");
        //   } else {

        // io.on("db", (e) => {
        //   console.log("front", e);
        // });
        io.emit("notifications", doc);

        //   }
        // });
      } else console.log("no notifications  for user");
    });
  }
});

setTimeout(async () => {
  const ids = await io.allSockets();
  console.log("sockets", ids);
}, 5000);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log("Listening on " + bind);
}
